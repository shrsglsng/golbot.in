import Sidebar from "@/shared/sidebar";
import axios from "axios";
import Head from "next/head";
import { useRouter } from "next/router";
import { useState } from "react";
import { PulseLoader } from "react-spinners";
import validator from "validator";

function AddAdmin() {
  const router = useRouter();

  const initVars = {
    email: "",
    password: "",
    conPassword: "",
  };
  const [credentials, setCredentials] = useState(initVars);
  const [credError, setCredError] = useState(initVars);
  const [isLoading, setIsLoading] = useState(false);

  async function addAdminService() {
    setCredError(initVars);
    setIsLoading(true);

    if (!process.env.NEXT_PUBLIC_SERVER_URL) throw "Server Url Not Set";
    const url = process.env.NEXT_PUBLIC_SERVER_URL + "/auth/admin/register";

    // validation
    if (!validator.isEmail(credentials.email)) {
      setCredError((f) => ({ ...f, email: "Enter a valid Email" }));
      setIsLoading(false);
      return;
    }
    if (credentials.password.length === 0) {
      setCredError((f) => ({ ...f, password: "Enter password" }));
      setIsLoading(false);
      return;
    }
    if (credentials.password !== credentials.conPassword) {
      setCredError((f) => ({ ...f, conPassword: "Passwords don't match" }));
      setIsLoading(false);
      return;
    }

    // send request
    try {
      var res = await axios.post(
        url,
        { email: credentials.email, password: credentials.password },
        {
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${localStorage.getItem("Token")}`,
          },
        }
      );

      if (res.status === 201) {
        alert("Successfully added Admin");
      }
    } catch (e: any) {
      setCredError({
        email: e.response.data.msg,
        password: " ",
        conPassword: " ",
      });
    }
    setIsLoading(false);
  }

  return (
    <>
      <Head>
        <title>Add Admin</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="w-screen h-screen flex">
        {/* sideBar */}
        <div className="w-72 h-screen fixed">
          <Sidebar />
        </div>
        {/* content */}
        <div className="w-[20%]" />
        <div className="w-[80%] h-full p-10 grid place-items-center">
          <div className="w-96 flex flex-col p-5 border-t-4 border-t-cblue border border-gray-400 rounded-lg">
            <div className="text-3xl text-center">Add Admin</div>
            <div className="h-8" />
            <input
              className={`p-2 px-5 border border-cbluel rounded-lg focus:border-cblue focus:border-2 ${
                credError.email !== "" && "border-red-500 focus:border-red-500"
              }`}
              type="text"
              value={credentials.email}
              onChange={(v) =>
                setCredentials((f) => ({ ...f, email: v.target.value }))
              }
              placeholder="Email Address"
            />
            <div className="h-8 text-red-500 text-sm ml-2 mt-1">
              {credError.email}
            </div>

            <input
              className={`p-2 px-5 border border-cbluel rounded-lg focus:border-cblue focus:border-2 ${
                credError.password !== "" &&
                "border-red-500 focus:border-red-500"
              }`}
              type="password"
              value={credentials.password}
              onChange={(v) =>
                setCredentials((f) => ({ ...f, password: v.target.value }))
              }
              placeholder="Password"
            />
            <div className="h-8 text-red-500 text-sm ml-2 mt-1">
              {credError.password}
            </div>

            <input
              className={`p-2 px-5 border border-cbluel rounded-lg focus:border-cblue focus:border-2 ${
                credError.conPassword !== "" &&
                "border-red-500 focus:border-red-500"
              }`}
              type="password"
              value={credentials.conPassword}
              onChange={(v) =>
                setCredentials((f) => ({ ...f, conPassword: v.target.value }))
              }
              placeholder="Confirm Password"
            />
            <div className="h-8 text-red-500 text-sm ml-2 mt-1">
              {credError.conPassword}
            </div>

            <button
              className="p-2 text-white border border-cblue bg-cblue rounded-md hover:border hover:border-cblue hover:text-cblue hover:bg-white"
              disabled={isLoading}
              onClick={addAdminService}>
              {isLoading ? <PulseLoader /> : "ADD ADMIN"}
            </button>
          </div>
        </div>
      </main>
    </>
  );
}

export default AddAdmin;
