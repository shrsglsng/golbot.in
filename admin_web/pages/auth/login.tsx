import Head from "next/head";
import axios from "axios";
import { useState } from "react";

import validator from "validator";
import { PulseLoader } from "react-spinners";
import { useRouter } from "next/router";

function LoginPage() {
  const router = useRouter();

  const [credentials, setCredentials] = useState({ email: "", password: "" });
  const [credError, setCredError] = useState({ email: "", password: "" });
  const [isLoading, setIsLoading] = useState(false);

  async function loginWithEmail(email: string, password: string) {
    setCredError({ email: "", password: "" });
    setIsLoading(true);

    if (!process.env.NEXT_PUBLIC_SERVER_URL) throw "Server Url Not Set";
    const url = process.env.NEXT_PUBLIC_SERVER_URL + "/auth/admin/login";

    if (!validator.isEmail(credentials.email)) {
      setCredError((f) => ({ ...f, email: "Enter a valid Email" }));
      setIsLoading(false);
      return;
    }
    if (credentials.password.length === 0) {
      setCredError((f) => ({ ...f, password: "Enter password" }));
      setIsLoading(false);
      return;
    }

    try {
      var res = await axios.post(url, { email, password });

      if (res.status === 200) {
        localStorage.setItem("Token", res.data.token);
        router.replace("/");
        return;
      }
    } catch {}

    setCredError({
      email: "Invalid Credentials",
      password: " ",
    });
    setIsLoading(false);
  }

  return (
    <>
      <Head>
        <title>Admin</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="w-screen h-screen grid place-items-center">
        <div className="w-96 flex flex-col p-5 border-t-4 border-t-cblue border border-gray-400 rounded-lg">
          <div className="text-3xl text-center">Admin Login</div>
          <div className="h-8" />
          <input
            className={`p-2 px-5 border border-cbluel rounded-lg focus:border-cblue focus:border-2 ${
              credError.email !== "" && "border-red-500 focus:border-red-500"
            }`}
            type="text"
            value={credentials.email}
            onChange={(v) =>
              setCredentials((f) => ({ ...f, email: v.target.value }))
            }
            placeholder="Email Address"
          />

          <div className="h-8 text-red-500 text-sm ml-2 mt-1">
            {credError.email}
          </div>
          <input
            className={`p-2 px-5 border border-cbluel rounded-lg focus:border-cblue focus:border-2 ${
              credError.password !== "" && "border-red-500 focus:border-red-500"
            }`}
            type="password"
            value={credentials.password}
            onChange={(v) =>
              setCredentials((f) => ({ ...f, password: v.target.value }))
            }
            placeholder="Password"
          />

          <div className="h-8 text-red-500 text-sm ml-2 mt-1">
            {credError.password}
          </div>

          <button
            className="p-2 text-white border border-cblue bg-cblue rounded-md hover:border hover:border-cblue hover:text-cblue hover:bg-white"
            disabled={isLoading}
            onClick={() => {
              loginWithEmail(credentials.email, credentials.password);
            }}>
            {isLoading ? <PulseLoader /> : "LOGIN"}
          </button>
        </div>
      </main>
    </>
  );
}

export default LoginPage;
