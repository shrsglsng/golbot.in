import Sidebar from "@/shared/sidebar"
import Head from "next/head"
import VisibilityIcon from "@mui/icons-material/Visibility"
import Link from "next/link"
import { useEffect, useState } from "react"
import ReactSlider from "react-slider"
import axios from "axios"
import { PulseLoader } from "react-spinners"
import { FeedbackModel } from "@/models/feedbackModel"
import ModalImage from "react-modal-image"

function FeedbackTableRow({ feedback }: { feedback: FeedbackModel }) {
  return (
    <tr className="bg-white border-b">
      <th className="px-6 py-4 font-medium text-gray-900 whitespace-nowrap text-left">
        {feedback.oid}
      </th>
      <td className="px-6 py-4 text-left">{feedback.phone}</td>
      <td className="px-6 py-4 text-left">{feedback.machineId}</td>
      <td className="px-6 py-4 text-left">
        {feedback.reportedDate.slice(0, 10)}
      </td>
      <td className="px-6 py-4 text-left">{feedback.description}</td>
      <td className="px-3 py-2 text-right">
        <ModalImage
          small={feedback.imgUrl}
          large={feedback.imgUrl}
          alt={feedback.oid}
        />
      </td>
    </tr>
  )
}

function Feedback() {
  const [isSearchLoading, setIsSearchLoading] = useState(false)
  const [pgVal, setPgVal] = useState(1)
  const [totPages, setTotPages] = useState(1)
  const [queryObj, setQueryObj] = useState({
    oid: "",
    machineId: "",
    phone: "",
    reportedDate: "",
  })
  const [feedbackList, setFeedbackList] = useState<FeedbackModel[]>([])

  async function getFeedbacks() {
    setIsSearchLoading(true)
    if (!process.env.NEXT_PUBLIC_SERVER_URL) throw "Server Url Not Set"
    const url = process.env.NEXT_PUBLIC_SERVER_URL + "/admin/getreportIssues"

    try {
      var res = await axios.get(url, {
        params: {
          orderId: queryObj.oid,
          machineId: queryObj.machineId,
          phone: queryObj.phone,
          reportedDate: queryObj.reportedDate,
          page: pgVal,
        },
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${localStorage.getItem("Token")}`,
        },
      })

      if (res.status === 200) {
        setFeedbackList(res.data.result.issues)
        setTotPages(res.data.result.numOfPages)
      }
    } catch (e: any) {}
    setIsSearchLoading(false)
  }

  useEffect(() => {
    getFeedbacks()
  }, [pgVal])

  return (
    <>
      <Head>
        <title>FeedBacks</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="w-screen flex">
        {/* sideBar */}
        <div className="w-72 h-screen fixed">
          <Sidebar />
        </div>
        {/* content */}
        <div className="w-[20%]" />
        <div className="w-[80%] h-full p-10 flex flex-col">
          {/* Filter Box */}
          <div className="w-full p-10 flex flex-col bg-slate-200 rounded-md">
            <div className="text-4xl">Filter</div>
            <div className="h-10" />
            <div className="w-full grid gap-5 grid-cols-2 md:grid-cols-3">
              {/*  */}
              <div className="flex flex-col">
                <div className="font-semibold text-sm ml-1">Order Id</div>
                <div className="h-2" />
                <input
                  className="p-1 px-2 rounded-md border border-gray-400"
                  value={queryObj.oid}
                  onChange={(v) =>
                    setQueryObj((f) => ({ ...f, oid: v.target.value }))
                  }
                  type="text"
                />
              </div>
              {/*  */}
              <div className="flex flex-col">
                <div className="font-semibold text-sm ml-1">Phone</div>
                <div className="h-2" />
                <input
                  className="p-1 px-2 rounded-md border border-gray-400"
                  value={queryObj.phone}
                  onChange={(v) =>
                    setQueryObj((f) => ({ ...f, phone: v.target.value }))
                  }
                  type="text"
                />
              </div>
              {/*  */}
              <div className="flex flex-col">
                <div className="font-semibold text-sm ml-1">Machine Id</div>
                <div className="h-2" />
                <input
                  className="p-1 px-2 rounded-md border border-gray-400"
                  value={queryObj.machineId}
                  onChange={(v) =>
                    setQueryObj((f) => ({ ...f, machineId: v.target.value }))
                  }
                  type="text"
                />
              </div>

              {/*  */}
              <div className="flex flex-col">
                <div className="font-semibold text-sm ml-1">Date</div>
                <div className="h-2" />
                <input
                  className="p-1 px-2 rounded-md border border-gray-400"
                  onChange={(v) =>
                    setQueryObj((f) => ({ ...f, reportedDate: v.target.value }))
                  }
                  type="date"
                />
              </div>

              {/*  */}
              <div className="flex flex-col col-span-3">
                <div className="h-7" />
                <button
                  className="p-1 rounded-md border border-cblue text-white bg-cblue hover:text-cblue hover:bg-transparent"
                  onClick={getFeedbacks}>
                  {isSearchLoading ? <PulseLoader /> : "Search"}
                </button>
              </div>
            </div>
          </div>

          {/* table */}
          <div className="h-10" />
          <div className="w-full p-10 flex flex-col bg-slate-200 rounded-md">
            {/* Order counts */}

            {/* table */}
            <div className="w-full overflow-x-auto rounded-lg">
              <table className="w-full text-sm text-left text-gray-500">
                <colgroup>
                  <col span={1} className="w-[10%]" />
                  <col span={1} className="w-[10%]" />
                  <col span={1} className="w-[15%]" />
                  <col span={1} className="w-[15%]" />
                  <col span={1} className="w-[40%]" />
                  <col span={1} className="w-[10%]" />
                </colgroup>
                <thead className="text-gray-900 uppercase bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left">Order id</th>
                    <th className="px-6 py-3 text-left">Phone</th>
                    <th className="px-6 py-3 text-left">Machine ID</th>
                    <th className="px-6 py-3 text-left">Order date</th>
                    <th className="px-6 py-3 text-left">description</th>
                    <th className="px-6 py-3 text-left">Image</th>
                  </tr>
                </thead>
                <tbody>
                  {feedbackList.map((feedback: FeedbackModel, i: number) => (
                    <FeedbackTableRow key={i} feedback={feedback} />
                  ))}
                </tbody>
              </table>
            </div>

            {/* pagination bar */}
            <div className="h-3" />
            <div className="w-full p-3 grid place-items-center">
              <div className="flex border border-cblue rounded-xl">
                <button
                  className="p-2 border-r border-cblue bg-cblue text-white hover:bg-transparent hover:text-cblue rounded-l-lg"
                  onClick={() => {
                    if (pgVal > 1) setPgVal((v) => (v -= 1))
                  }}>
                  Previous
                </button>
                <div className="flex px-3 justify-center items-center">
                  <input
                    className="w-10 px-1 m-1 mr-3 rounded-md border text-center"
                    // value={1}
                    type="text"
                    pattern="[0-9]*"
                    value={pgVal}
                    onChange={(e) => {
                      const num =
                        parseInt(e.target.value.replace("/D/g", "")) || 0
                      if (num > totPages) return
                      setPgVal(num)
                    }}
                  />
                  <div className="text-gray-600 text-lg mr-1">/ {totPages}</div>
                </div>
                <button
                  className="p-2 border-l border-cblue bg-cblue text-white hover:bg-transparent hover:text-cblue rounded-r-lg"
                  onClick={() => {
                    if (pgVal < totPages) setPgVal((v) => (v += 1))
                  }}>
                  Next
                </button>
              </div>
            </div>
          </div>
        </div>
      </main>
    </>
  )
}

export default Feedback
