import Sidebar from "@/shared/sidebar";
import Head from "next/head";
import VisibilityIcon from "@mui/icons-material/Visibility";
import Link from "next/link";
import { useEffect, useState } from "react";
import ReactSlider from "react-slider";
import { OrderModel } from "@/models/orderModel";
import axios from "axios";
import { PulseLoader } from "react-spinners";

function OrderTableRow({ order }: { order: OrderModel }) {
  return (
    <tr className="bg-white border-b">
      <th className="px-6 py-4 font-medium text-gray-900 whitespace-nowrap text-left">
        {order.orderId}
      </th>
      <td className="px-6 py-4 text-left">{order.phone}</td>
      <td className="px-6 py-4 text-left">{order.machineId}</td>
      <td className="px-6 py-4 text-left uppercase ">{order.ostatus}</td>
      <td className="px-6 py-4 text-right">{order.orderDate.slice(0, 10)}</td>
      <td className="px-6 py-4 text-right uppercase">₹{order.amount}</td>
      <td className="px-6 py-4 text-right">
        <Link
          href="/"
          className="mr-2 p-2 font-medium text-cblue hover:bg-gray-200 rounded-full">
          <VisibilityIcon />
        </Link>
      </td>
    </tr>
  );
}

function Orders() {
  const [isSearchLoading, setIsSearchLoading] = useState(false);
  const [pgVal, setPgVal] = useState(1);
  const [totPages, setTotPages] = useState(1);
  const [queryObj, setQueryObj] = useState({
    orderId: "",
    machineId: "",
    ostatus: "ALL",
    phone: "",
    minAmt: 30,
    maxAmt: 1000,
    date: "",
  });
  const [orderList, setOrderList] = useState<OrderModel[]>([]);
  const [orderCounts, setOrderCounts] = useState({
    totAmt: 0,
    GOLQty: 0,
    PANQty: 0,
    PWOQty: 0,
  });

  async function getAllOrders() {
    setIsSearchLoading(true);
    if (!process.env.NEXT_PUBLIC_SERVER_URL) throw "Server Url Not Set";
    const url =
      process.env.NEXT_PUBLIC_SERVER_URL + "/order/admin/getallorders";

    try {
      var res = await axios.get(url, {
        params: {
          orderId: queryObj.orderId,
          machineId: queryObj.machineId,
          ostatus: queryObj.ostatus,
          phone: queryObj.phone,
          minAmt: queryObj.minAmt,
          maxAmt: queryObj.maxAmt,
          date: queryObj.date,
          page: pgVal,
        },
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${localStorage.getItem("Token")}`,
        },
      });

      if (res.status === 200) {
        setOrderList(res.data.result.orders);
        setTotPages(res.data.result.numOfPages);
        setOrderCounts(res.data.result.orderCounts);
      }
    } catch (e: any) {}
    setIsSearchLoading(false);
  }

  useEffect(() => {
    getAllOrders();
  }, [pgVal]);

  return (
    <>
      <Head>
        <title>Orders</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="w-screen flex">
        {/* sideBar */}
        <div className="w-72 h-screen fixed">
          <Sidebar />
        </div>
        {/* content */}
        <div className="w-[20%]" />
        <div className="w-[80%] h-full p-10 flex flex-col">
          {/* Filter Box */}
          <div className="w-full p-10 flex flex-col bg-slate-200 rounded-md">
            <div className="text-4xl">Filter</div>
            <div className="h-10" />
            <div className="w-full grid gap-5 grid-cols-2 md:grid-cols-3">
              {/*  */}
              <div className="flex flex-col">
                <div className="font-semibold text-sm ml-1">Order Id</div>
                <div className="h-2" />
                <input
                  className="p-1 px-2 rounded-md border border-gray-400"
                  value={queryObj.orderId}
                  onChange={(v) =>
                    setQueryObj((f) => ({ ...f, orderId: v.target.value }))
                  }
                  type="text"
                />
              </div>
              {/*  */}
              <div className="flex flex-col">
                <div className="font-semibold text-sm ml-1">Phone</div>
                <div className="h-2" />
                <input
                  className="p-1 px-2 rounded-md border border-gray-400"
                  value={queryObj.phone}
                  onChange={(v) =>
                    setQueryObj((f) => ({ ...f, phone: v.target.value }))
                  }
                  type="text"
                />
              </div>
              {/*  */}
              <div className="flex flex-col">
                <div className="font-semibold text-sm ml-1">Machine Id</div>
                <div className="h-2" />
                <input
                  className="p-1 px-2 rounded-md border border-gray-400"
                  value={queryObj.machineId}
                  onChange={(v) =>
                    setQueryObj((f) => ({ ...f, machineId: v.target.value }))
                  }
                  type="text"
                />
              </div>
              {/*  */}
              <div className="flex flex-col">
                <div className="font-semibold text-sm ml-1">Status</div>
                <div className="h-2" />
                <select
                  className="p-1 px-2 rounded-md border border-gray-400"
                  onChange={(v) =>
                    setQueryObj((f) => ({ ...f, ostatus: v.target.value }))
                  }>
                  <option>ALL</option>
                  <option>PENDING</option>
                  <option>READY</option>
                  <option>PREPARING</option>
                  <option>COMPLETED</option>
                  <option>CANCELED</option>
                </select>
              </div>

              {/*  */}
              <div className="flex flex-col">
                <div className="font-semibold text-sm ml-1">Date</div>
                <div className="h-2" />
                <input
                  className="p-1 px-2 rounded-md border border-gray-400"
                  onChange={(v) =>
                    setQueryObj((f) => ({ ...f, date: v.target.value }))
                  }
                  type="date"
                />
              </div>

              {/*  */}
              <div className="flex flex-col">
                <div className="font-semibold text-sm ml-1">Amount</div>
                <div className="h-2" />

                <div className="h-full relative">
                  <ReactSlider
                    className="bg-black border-2 absolute"
                    thumbClassName="p-1 text-white bg-cblue rounded-md"
                    trackClassName="bg-black"
                    min={30}
                    max={1000}
                    defaultValue={[queryObj.minAmt, queryObj.maxAmt]}
                    renderThumb={(props, state) => (
                      <div {...props}>{state.valueNow}</div>
                    )}
                    renderTrack={(props, state) => (
                      <div {...props} style={{ backgroundColor: "red" }} />
                    )}
                    onChange={(v) =>
                      setQueryObj((f) => ({ ...f, minAmt: v[0], maxAmt: v[1] }))
                    }
                    pearling
                    minDistance={10}
                  />
                  <div className="mt-3 mx-1 h-1 bg-cbluel" />
                </div>
              </div>

              {/*  */}
              <div className="flex flex-col col-span-3">
                <div className="h-7" />
                <button
                  className="p-1 rounded-md border border-cblue text-white bg-cblue hover:text-cblue hover:bg-transparent"
                  onClick={getAllOrders}>
                  {isSearchLoading ? <PulseLoader /> : "Search"}
                </button>
              </div>
            </div>
          </div>

          {/* table */}
          <div className="h-10" />
          <div className="w-full p-10 flex flex-col bg-slate-200 rounded-md">
            {/* Order counts */}

            <div className="w-full p-5 flex justify-between">
              <div>
                Total amount :{" "}
                <span className="p-2 bg-white rounded-lg">
                  ₹{orderCounts.totAmt}
                </span>{" "}
              </div>
              <div>
                Golgappa :{" "}
                <span className="p-2 px-3 bg-white rounded-lg">
                  {orderCounts.GOLQty}
                </span>{" "}
              </div>
              <div>
                Pani Puri :{" "}
                <span className="p-2 px-3 bg-white rounded-lg">
                  {orderCounts.PANQty}
                </span>{" "}
              </div>
              <div>
                Pani Puri without Onions :{" "}
                <span className="p-2 px-3 bg-white rounded-lg">
                  {orderCounts.PWOQty}
                </span>{" "}
              </div>
            </div>

            <div className="h-5" />
            {/* table */}
            <div className="w-full overflow-x-auto rounded-lg">
              <table className="w-full text-sm text-left text-gray-500">
                <thead className="text-gray-900 uppercase bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left">Order id</th>
                    <th className="px-6 py-3 text-left">phone</th>
                    <th className="px-6 py-3 text-left">Machine ID</th>
                    <th className="px-6 py-3 text-left">status</th>
                    <th className="px-6 py-3 text-right">Order date</th>
                    <th className="px-6 py-3 text-right">Amount</th>
                    <th className="px-6 py-3 text-right">Action</th>
                  </tr>
                </thead>
                <tbody>
                  {orderList.map((order, i) => (
                    <OrderTableRow key={i} order={order} />
                  ))}
                </tbody>
              </table>
            </div>

            {/* pagination bar */}
            <div className="h-3" />
            <div className="w-full p-3 grid place-items-center">
              <div className="flex border border-cblue rounded-xl">
                <button
                  className="p-2 border-r border-cblue bg-cblue text-white hover:bg-transparent hover:text-cblue rounded-l-lg"
                  onClick={() => {
                    if (pgVal > 1) setPgVal((v) => (v -= 1));
                  }}>
                  Previous
                </button>
                <div className="flex px-3 justify-center items-center">
                  <input
                    className="w-10 px-1 m-1 mr-3 rounded-md border text-center"
                    // value={1}
                    type="text"
                    pattern="[0-9]*"
                    value={pgVal}
                    onChange={(e) => {
                      const num =
                        parseInt(e.target.value.replace("/D/g", "")) || 0;
                      if (num > totPages) return;
                      setPgVal(num);
                    }}
                  />
                  <div className="text-gray-600 text-lg mr-1">/ {totPages}</div>
                </div>
                <button
                  className="p-2 border-l border-cblue bg-cblue text-white hover:bg-transparent hover:text-cblue rounded-r-lg"
                  onClick={() => {
                    if (pgVal < totPages) setPgVal((v) => (v += 1));
                  }}>
                  Next
                </button>
              </div>
            </div>
          </div>
        </div>
      </main>
    </>
  );
}

export default Orders;
