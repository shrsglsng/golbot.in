import Head from "next/head"
import { useEffect, useState } from "react"
import Image from "next/image"
import { useRouter } from "next/router"
import { useSelector, useDispatch } from "react-redux"
import { selectCart, setItems, updateCart } from "../../redux/cartSlice"
import { GetServerSideProps } from "next/types"
import Navbar from "../../shared/navbar"
import { ItemModel as BaseItemModel } from "../../models/itemModel"

// Extend base model to include frontend-specific fields
type ExtendedItemModel = BaseItemModel & {
  quantity: number
  availableQty: number
}

function PuriCard({ item, index }: Readonly<{ item: ExtendedItemModel; index: number }>) {
  const dispatch = useDispatch()

  function handleBtnClick(action: "+" | "-") {
    if (action === "+" && item.quantity < 10) {
      dispatch(updateCart({ item: { ...item, quantity: item.quantity + 1 }, index }))
    } else if (action === "-" && item.quantity > 0) {
      dispatch(updateCart({ item: { ...item, quantity: item.quantity - 1 }, index }))
    }
  }

  const renderControls = () => {
    if (!item.isAvailable) {
      return (
        <div className="w-4/5 -mt-5 bg-zinc-200 border border-cblue rounded-md grid place-items-center text-xs text-zinc-500">
          <span>Sold Out</span>
        </div>
      )
    }

    if (item.quantity === 0) {
      return (
        <button
          onClick={() => handleBtnClick("+")}
          className="w-4/5 -mt-5 bg-blue-50 border border-cblue rounded-md place-items-center grid"
        >
          <div className="w-full px-3 py-1 text-cblue text-center font-bold">Add</div>
        </button>
      )
    }

    return (
      <div className="w-4/5 -mt-5 bg-cblue rounded-md place-items-center grid">
        <div className="w-full px-3 py-1 flex justify-between items-center text-white">
          <button onClick={() => handleBtnClick("-")}>‚àí</button>
          <div>{item.quantity}</div>
          <button onClick={() => handleBtnClick("+")}>+</button>
        </div>
      </div>
    )
  }

  return (
    <div className="h-36 w-full p-5 flex" key={item.id}>
      <div className="flex-grow-[0.7] basis-0 flex flex-col">
        <Image src="/vegIcon.svg" height={20} width={20} alt="Veg Icon" />
        <div className="h-1" />
        <div>{item.name}</div>
        <div className="h-2" />
        <div>‚Çπ{item.price}</div>
        <div className="text-xs text-gray-500">{item.desc}</div>
      </div>

      <div className="flex-grow-[0.3] basis-0 flex flex-col justify-center">
        <div className="relative h-full w-full">
          {item.imgUrl ? (
            <Image
              src={"/paniPuri.png"}
              alt={item.name}
              fill
              className="rounded-md object-cover"
            />
          ) : (
            <div className="h-full w-full bg-gray-200 flex items-center justify-center rounded-md text-sm text-gray-500">
              No Image
            </div>
          )}
        </div>

        <div className="w-full relative h-4 flex justify-center">{renderControls()}</div>
      </div>
    </div>
  )
}

export default function Home({ allItems }: Readonly<{ allItems: ExtendedItemModel[] }>) {
  const router = useRouter()
  const dispatch = useDispatch()
  const items = useSelector(selectCart) as ExtendedItemModel[]
  const { mid } = router.query
  const [total, setTotal] = useState(0)
  const [showOrderStrip, setShowOrderStrip] = useState(false)

  useEffect(() => {
    dispatch(setItems({ allItems }))
  }, [dispatch, allItems])

  useEffect(() => {
    let tmp = 0
    items.forEach((ele) => {
      if (!isNaN(ele.price) && !isNaN(ele.quantity)) {
        tmp += ele.price * ele.quantity
      }
    })
    setTotal(tmp)
  }, [items])

  useEffect(() => {
    // Check if user came from order completion
    if (router.asPath.includes('fromOrderComplete=true')) {
      setShowOrderStrip(true)
      
      // Hide the strip after 10 seconds
      const stripTimeout = setTimeout(() => {
        setShowOrderStrip(false)
      }, 10000)

      return () => clearTimeout(stripTimeout)
    }
  }, [router.asPath])

  return (
    <>
      <Head>
        <title>GolBot</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="w-full fixed top-0 z-10">
        <Navbar />
      </div>

      {/* Green strip for order completion */}
      {showOrderStrip && (
        <div className="w-full bg-gradient-to-r from-green-600 to-green-500 text-white py-4 px-6 fixed top-16 z-10 shadow-md border-b border-green-400 animate-in slide-in-from-top-5 duration-500">
          <div className="flex items-center justify-center space-x-3">
            <div className="w-2 h-2 bg-white rounded-full animate-bounce"></div>
            <div className="animate-in fade-in-50 duration-700 delay-200">
              <p className="text-center font-semibold text-sm tracking-wide animate-pulse">
                üçΩÔ∏è Your order is being prepared
              </p>
            </div>
            <div className="w-2 h-2 bg-white rounded-full animate-bounce animation-delay-300"></div>
          </div>
          
          {/* Progress bar animation */}
          <div className="mt-2 w-full bg-green-700 bg-opacity-30 rounded-full h-1">
            <div className="bg-white h-1 rounded-full animate-pulse"></div>
          </div>
        </div>
      )}

      <div className="w-full grid place-items-center">
        <div className="w-full md:w-1/2 lg:w-1/4 flex flex-col">
          <div className="w-full flex flex-col overflow-y-auto">
            <div className="h-20" />
            <div className="h-64 py-5">
              <div className="relative h-full w-full">
                <Image src={"/packed-food.webp"} alt="Header Banner" fill />
              </div>
            </div>

            {Array.isArray(items) && items.length > 0 ? (
              items.map((item, i) => (
                <div key={item.id}>
                  <PuriCard item={item} index={i} />
                  {i !== items.length - 1 && (
                    <div className="h-2 bg-white grid place-items-center px-5">
                      <div className="h-[0.5px] w-full bg-black" />
                    </div>
                  )}
                </div>
              ))
            ) : (
              <div className="text-center text-gray-500 py-10">Loading menu...</div>
            )}

            <div className="flex-grow bg-gray-200" />
          </div>
          <div className="h-20" />
        </div>

        <div className="fixed bottom-0 w-full md:w-1/2 lg:w-1/4 p-3 bg-white">
          <button
            onClick={() => router.push(`/${mid}/checkout`)}
            disabled={total <= 0}
            className={`w-full p-3 rounded-md ${
              total <= 0 ? "bg-cbluel" : "bg-cblue hover:bg-cbluel"
            }`}
          >
            <div className="text-lg text-white">
              Add to Order - ‚Çπ{Intl.NumberFormat("en-IN").format(total)}
            </div>
          </button>
        </div>
      </div>
    </>
  )
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const { mid } = context.params as { mid: string };

  if (!process.env.NEXT_PUBLIC_SERVER_URL) {
    throw new Error("Server Url Not Set");
  }

  const machineRes = await fetch(
    `${process.env.NEXT_PUBLIC_SERVER_URL}/machine/${mid}`
  );

  if (machineRes.status === 404) {
    return { notFound: true };
  }

  const itemsRes = await fetch(`${process.env.NEXT_PUBLIC_SERVER_URL}/getAllItems`);
  const json = await itemsRes.json();
  const rawItems = json.result?.items ?? [];

  const allItems: ExtendedItemModel[] = rawItems.map((item: BaseItemModel) => ({
    ...item,
    availableQty: item.qtyLeft ?? 0,
    quantity: 0,
  }));

  return {
    props: { allItems },
  };
};

