import Head from "next/head"
import { useEffect, useState } from "react"
import { sendOtp, verifyOtp } from "../../services/auth"
import { useRouter } from "next/router"
import { useDispatch } from "react-redux"
import { PulseLoader } from "react-spinners"
import Logo from "../../shared/logo"
import { updateOrder } from "../../redux/orderSlice"
import { getLatestOrder } from "../../services/order"

export default function Login() {
  const router = useRouter()
  const dispatch = useDispatch()
  // changed this to true
  const [otpSent, setOtpSent] = useState(true)
  const [isLoading, setIsLoading] = useState(false)

  const initField = { phone: "", OTP: "" }
  const [fieldData, setFieldData] = useState(initField)
  const [errField, setErrorField] = useState(initField)

  async function handleBtnOnClick() {
    setIsLoading(true)
    setErrorField((f) => initField)
    if (fieldData.phone.length !== 10) {
      setErrorField((f) => ({ ...f, phone: "Invalid Phone Number" }))
      setIsLoading(false)
      return
    }

    if (!otpSent) {
      if (await sendOtp(fieldData.phone)) setOtpSent(true)
    } else {
      setErrorField((f) => initField)
      // sending random numbers instead of fieldData.OTP
      const user = await verifyOtp(fieldData.phone, "0000", dispatch)

      if (!user) {
        setErrorField((f) => ({ ...f, OTP: "Invalid OTP" }))
        setIsLoading(false)
        return
      }
      router.replace(`/${router.query.next ?? ""}`)
      dispatch(updateOrder(await getLatestOrder()))
    }
    setIsLoading(false)
    return
  }

  useEffect(() => {
    if (localStorage.getItem("Token") != null)
      router.replace(router.query.next?.toString() ?? "/")
  }, [])
  return (
    <>
      <Head>
        <title>Login</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="w-screen h-screen flex flex-col">
        <div className="h-20 p-3 w-screen flex bg-cblue border border-b">
          <div
            className="flex-1 basis-0 h-full w-full"
            onClick={() => {
              router.push(`/`)
            }}>
            <div className="relative w-28 h-full">
              <Logo />
            </div>
          </div>
        </div>

        {/* login form */}
        <div className="w-full h-full grid place-items-center">
          <div className="w-80 flex flex-col p-5 border-t-4 border-t-cblue border border-gray-400 rounded-lg">
            <div className="text-3xl text-center">Login</div>

            <div className="h-8" />
            <div className="flex items-center">
              <div className="ml-1 p-2 border rounded-lg">+91</div>
              <div className="w-3" />
              <input
                // commented this
                // disabled={otpSent}
                className={`p-2 px-5 w-full border border-cbluel rounded-lg focus:border-cblue focus:border-2 ${
                  // commented this
                  // otpSent && "text-gray-500"
                  ""
                } ${
                  errField.phone !== "" && "border-red-500 focus:border-red-500"
                }`}
                type="text"
                value={fieldData.phone}
                onChange={(v) =>
                  setFieldData((f) => ({ ...f, phone: v.target.value }))
                }
                onKeyDown={(e) => {
                  if (e.key == "Enter") handleBtnOnClick()
                }}
                autoFocus={true}
                placeholder="Enter Phone Number"
              />
            </div>
            <div className="h-8 text-red-500 text-sm ml-2 mt-1">
              {errField.phone}
            </div>
            {/* set otpSent  */}
            {false && (
              <>
                <div className="flex items-center">
                  <div className="ml-1">Enter OTP : </div>
                  <div className="w-4" />
                  <input
                    className={`w-44 p-2 px-5 border border-cbluel rounded-lg focus:border-cblue focus:border-2 ${
                      errField.OTP !== "" &&
                      "border-red-500 focus:border-red-500"
                    }`}
                    type="text"
                    value={fieldData.OTP}
                    onChange={(v) =>
                      setFieldData((f) => ({ ...f, OTP: v.target.value }))
                    }
                    onKeyDown={(e) => {
                      if (e.key == "Enter") handleBtnOnClick()
                    }}
                  />
                </div>
                <div className="h-8 text-red-500 text-sm ml-2 mt-1">
                  {errField.OTP}
                </div>
              </>
            )}
            <button
              className="p-2 text-white border border-cblue bg-cblue rounded-md hover:border hover:border-cblue hover:text-cblue hover:bg-white"
              onClick={handleBtnOnClick}>
              {isLoading ? <PulseLoader /> : otpSent ? "Login" : "Send OTP"}
            </button>
          </div>
          <div />
        </div>
      </main>
    </>
  )
}
